#!/data/data/com.termux/files/usr/bin/env bash

# gh-open: Open the current GitHub repository (or path) in a web browser.
# Supports options for remote, branch, dry-run, version, help.
# Detects appropriate URL opener (termux-open-url, xdg-open, open, or echo fallback).
# Usage: gh-open [-r <remote>] [-b <branch>] [-n] [-v] [-h] [path]

# Color codes for output
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
NC="\033[0m" # No Color

# Default values
remote="origin"
branch=""
dryrun=false
version="1.0"

print_usage() {
  cat <<EOF
Usage: gh-open [-r <remote>] [-b <branch>] [-n] [-v] [-h] [path]
  -r <remote>   Specify git remote (default: origin)
  -b <branch>   Specify branch or commit (default: current branch)
  -n            Dry run (show URL without opening)
  -v            Show script version
  -h            Show help
  [path]        Optional file or directory in the repo
EOF
}

# Parse command-line options
while getopts ":r:b:nvh" opt; do
  case "$opt" in
    r) remote="$OPTARG" ;;
    b) branch="$OPTARG" ;;
    n) dryrun=true ;;
    v) echo "gh-open version $version"; exit 0 ;;
    h) print_usage; exit 0 ;;
    \?) echo -e "${RED}Invalid option: -$OPTARG${NC}" >&2; print_usage; exit 1 ;;
    :)  echo -e "${RED}Option -$OPTARG requires an argument.${NC}" >&2; print_usage; exit 1 ;;
  esac
done
shift $((OPTIND-1))

# Ensure inside a Git repository
if ! git rev-parse --is-inside-work-tree &> /dev/null; then
  echo -e "${RED}Error:${NC} Not a git repository." >&2
  exit 1
fi

# Determine branch if not provided
if [[ -z "$branch" ]]; then
  branch=$(git symbolic-ref --quiet --short HEAD 2>/dev/null)
  if [[ -z "$branch" ]]; then
    branch="HEAD"
  fi
fi

# Handle optional path argument
file=""
target="${1:-.}"
if [[ -n "$target" ]]; then
  if [[ -d "$target" ]]; then
    cd "$target" 2>/dev/null || { echo -e "${RED}Error:${NC} Cannot access directory '$target'." >&2; exit 1; }
  elif [[ -f "$target" ]]; then
    file=$(basename "$target")
    cd "$(dirname "$target")" 2>/dev/null || { echo -e "${RED}Error:${NC} Cannot access path '$(dirname "$target")'." >&2; exit 1; }
  else
    echo -e "${RED}Error:${NC} Path '$target' not found." >&2
    exit 1
  fi
fi

# Get remote URL and convert to https format
repo_url=$(git config --get remote."$remote".url 2>/dev/null)
if [[ -z "$repo_url" ]]; then
  echo -e "${RED}Error:${NC} Remote '$remote' not found." >&2
  exit 1
fi
project_url=$(echo "$repo_url" | sed -e 's#\.git$##' -e 's#ssh://##' -e 's#git://#https://#' -e 's#git@#https://#' -e 's#github\.com:#github.com/#')
project_url="${project_url%/}"

# Determine relative directory path
git_dir=$(git rev-parse --show-prefix)

# Choose URL path type (blob for files, tree for directories)
if [[ -n "$file" ]]; then
  path_type="blob"
else
  path_type="tree"
fi

# Construct the final GitHub URL
url="${project_url}/${path_type}/${branch}/${git_dir}${file}"
url="${url%/}"

if $dryrun; then
  echo -e "${YELLOW}Dry-run:${NC} $url"
  exit 0
fi

echo -e "${GREEN}Opening URL:${NC} $url"

# Open URL using available method
if command -v termux-open-url &> /dev/null; then
  termux-open-url "$url"
elif command -v xdg-open &> /dev/null; then
  xdg-open "$url" &> /dev/null
elif command -v open &> /dev/null; then
  open "$url"
else
  # Fallback: just print the URL
  echo "$url"
  exit 0
fi
